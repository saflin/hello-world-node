import org.jenkinsci.plugins.pipeline.modeldefinition.when.impl.ChangeSetConditional
import java.util.ArrayList

@NonCPS
def boolean hasSourceFilesChanged(String[] filePatterns) {
  if(filePatterns.length == 0){
      return false
  }
  patternList = new ArrayList<ChangeSetConditional>()
  for(pattern in filePatterns){
    patternList.add(new ChangeSetConditional(pattern))
  }
  for (changeLogSet in currentBuild.changeSets) {
    for (entry in changeLogSet.getItems()) {
      for(conditionalPattern in patternList){
        if (conditionalPattern.changeSetMatches(entry, conditionalPattern.getPattern(), false)) {
            return true;
        }
      }        
    }
  }
  return false
}

def call(String[] changeSetPatterns= []) {
  String[] filePatterns
  if(changeSetPatterns.length == 0) {
    filePatterns = ["**/src/*.js"]
  }else {
    filePatterns = changeSetPatterns
  }
    pipeline {
      agent {
        kubernetes {
          label "jenkins-pod-agent"
          defaultContainer("jnlp")
          yamlFile 'ci/pod.yaml'
        }
      }
      stages {
        stage('Check') {
          steps {
            container('node') {
              sh 'npm version'
            }
          }
        }
        stage('Build') {
          steps {
            container('node') {
              sh 'npm install'
              script {
                def changeLogSets = currentBuild.changeSets
                echo("**changeSets=" + changeLogSets)
                for (int i = 0; i < changeLogSets.size(); i++) {
                      def entries = changeLogSets[i].items
                      for (int j = 0; j < entries.length; j++) {
                          def entry = entries[j]
                          echo "** ${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}"
                          def files = new ArrayList(entry.affectedFiles)
                          for (int k = 0; k < files.size(); k++) {
                              def file = files[k]
                              echo "** ${file.editType.name} ${file.path}"
                          }
                      }
                }
              }
            }
          }
        }

        stage('Publish') {
          when { 
            allof {  
              branch 'master'
              expression { hasSourceFilesChanged(filePatterns)} 
            }
          }

          steps {
            withCredentials([file(credentialsId: 'npm-access-file', variable: 'npmauth'),
            usernamePassword(credentialsId: 'github-token', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                container('node') {
                    sh '''
                        apt update && apt install -y git
                        git config --global safe.directory $WORKSPACE
                        git config --global user.email "saflin.ph@gmail.com"
                        git config --global user.name "${GIT_USER}"
                        git config --global url.https://${GIT_TOKEN}@github.com/.insteadOf https://github.com/
                        git checkout -b master origin/master
                        cat $npmauth > .npmrc
                      ''' 
                    sh 'npm version minor'
                    sh 'npm publish --registry http://35.197.217.72:8081/repository/npm-private/ --userconfig=./.npmrc'
                    sh 'git push origin master'
                }
            }
          }
        }
      }

      post {
        always {
            cleanWs()
        }
      }
    }
}

call()